#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
#include <windows.h>

#define MAX_LIVROS 100
#define MAX_USUARIOS 50


typedef struct {
    int id;
    char titulo[100];
    char autor[100];
    int disponivel;
} Livro;

typedef struct {
    char nome[100];
    char CPF[15];
    int livroEmprestado;
    int senha;
} Usuario;


Livro livros[MAX_LIVROS];
int totalLivros = 0;
int i=0;
Usuario usuarios[MAX_USUARIOS];
int totalUsuarios = 0;

Usuario usuarioLogado; 

void salvarDados() {
    FILE *file = fopen("biblioteca.dat", "wb");
    if (!file) {
        printf("Erro ao salvar dados.\n");
        return;
    }
    fwrite(&totalLivros, sizeof(int), 1, file);
    fwrite(livros, sizeof(Livro), totalLivros, file);
    fclose(file);
}

void carregarDados() {
    FILE *file = fopen("biblioteca.dat", "rb");
    if (!file) return;
    fread(&totalLivros, sizeof(int), 1, file);
    fread(livros, sizeof(Livro), totalLivros, file);
    fclose(file);
}

void salvarUsuarios() {
    FILE *file = fopen("usuarios.dat", "wb");
    if (!file) return;
    fwrite(&totalUsuarios, sizeof(int), 1, file);
    fwrite(usuarios, sizeof(Usuario), totalUsuarios, file);
    fclose(file);
}

void carregarUsuarios() {
    FILE *file = fopen("usuarios.dat", "rb");
    if (!file) return;
    fread(&totalUsuarios, sizeof(int), 1, file);
    fread(usuarios, sizeof(Usuario), totalUsuarios, file);
    fclose(file);
}

void CadastrarUsuario() {
    Usuario novo;
    getchar();
    printf("Nome: ");
    fgets(novo.nome, 100, stdin);
    novo.nome[strcspn(novo.nome, "\n")] = '\0';

    printf("CPF: ");
    fgets(novo.CPF, 15, stdin);
    novo.CPF[strcspn(novo.CPF, "\n")] = '\0';

    printf("Senha: ");
    scanf("%d", &novo.senha);

    novo.livroEmprestado = 0;

    usuarios[totalUsuarios++] = novo;
    salvarUsuarios();
    printf("Cadastro realizado com sucesso!\n\n");
}

int Login() {
    char CPF[15];
    int senha;
    getchar();

    printf("CPF: ");
    fgets(CPF, 15, stdin);
    CPF[strcspn(CPF, "\n")] = '\0';

    printf("Senha: ");
    scanf("%d", &senha);

    for (i = 0; i < totalUsuarios; i++) {
        if (strcmp(usuarios[i].CPF, CPF) == 0 && usuarios[i].senha == senha) {
            usuarioLogado = usuarios[i];
            printf("Bem-vindo, %s!\n\n", usuarioLogado.nome);
            return 1;
        }
    }
    printf("CPF ou senha incorretos.\n\n");
    return 0;
}

void TelaInicialLogin() {
    int opcao;
    carregarUsuarios();

    printf("1. Login\n2. Cadastro\nEscolha: ");
    scanf("%d", &opcao);
    if (opcao == 2) {
        CadastrarUsuario();
    }

    while (!Login()) {
        printf("Tente novamente.\n");
    }
}


void adicionarLivro() {
    if (totalLivros >= MAX_LIVROS) {
        printf("Limite de livros atingido!\n");
        return;
    }

    Livro novo;
    novo.id = totalLivros + 1;
    getchar();
    printf("Título: ");
    fgets(novo.titulo, 100, stdin);
    printf("Autor: ");
    fgets(novo.autor, 100, stdin);
    novo.disponivel = 1;

    livros[totalLivros++] = novo;
    salvarDados();
    printf("Livro adicionado!\n");
}

void removerLivro() {
    int id;
    printf("ID do livro: ");
    scanf("%d", &id);
    for (i = 0; i < totalLivros; i++) {
        if (livros[i].id == id) {
            livros[i] = livros[totalLivros - 1];
            totalLivros--;
            salvarDados();
            printf("Livro removido.\n");
            return;
        }
    }
    printf("Livro não encontrado.\n");
}

void buscarLivro() {
    char titulo[100];
    getchar();
    printf("Título: ");
    fgets(titulo, 100, stdin);
    for (i = 0; i < totalLivros; i++) {
        if (strstr(livros[i].titulo, titulo)) {
            printf("ID: %d, Título: %s, Autor: %s, Disponível: %s\n",
                   livros[i].id, livros[i].titulo, livros[i].autor,
                   livros[i].disponivel ? "Sim" : "Não");
        }
    }
}

void listarLivrosDisponiveis() {
    for (i = 0; i < totalLivros; i++) {
        if (livros[i].disponivel) {
            printf("ID: %d, Título: %s, Autor: %s\n", livros[i].id, livros[i].titulo, livros[i].autor);
        }
    }
}

void listarLivrosEmprestados() {
    for (i = 0; i < totalLivros; i++) {
        if (!livros[i].disponivel) {
            printf("ID: %d, Título: %s, Autor: %s\n", livros[i].id, livros[i].titulo, livros[i].autor);
        }
    }
}

void registrarEmprestimo() {
    int id;
    printf("ID do livro para empréstimo: ");
    scanf("%d", &id);
    if (id <= 0 || id > totalLivros || !livros[id - 1].disponivel) {
        printf("Livro indisponível.\n");
        return;
    }

    livros[id - 1].disponivel = 0;
    for (i = 0; i < totalUsuarios; i++) {
        if (strcmp(usuarios[i].CPF, usuarioLogado.CPF) == 0) {
            usuarios[i].livroEmprestado = id;
            usuarioLogado.livroEmprestado = id;
            break;
        }
    }

    salvarUsuarios();
    salvarDados();
    printf("Empréstimo registrado.\n");
}

void registrarDevolucao() {
    int id;
    printf("ID do livro para devolução: ");
    scanf("%d", &id);
    if (id <= 0 || id > totalLivros || livros[id - 1].disponivel) {
        printf("Livro já está disponível.\n");
        return;
    }

    livros[id - 1].disponivel = 1;
    for (i = 0; i < totalUsuarios; i++) {
        if (strcmp(usuarios[i].CPF, usuarioLogado.CPF) == 0 && usuarios[i].livroEmprestado == id) {
            usuarios[i].livroEmprestado = 0;
            usuarioLogado.livroEmprestado = 0;
            break;
        }
    }

    salvarUsuarios();
    salvarDados();
    printf("Devolução registrada.\n");
}

void printCentralizado(const char *texto){
	CONSOLE_SCREEN_BUFFER_INFO csbi;
	int LarguraTerminal;
	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &csbi);
	LarguraTerminal = csbi.srWindow.Right - csbi.srWindow.Left + 1;
	int ComprimentoTexto = strlen(texto);
	int espacos = (LarguraTerminal - ComprimentoTexto) / 2;
	for (i = 0; i < espacos; i++) printf(" ");
	printf("%s\n", texto);
}

void menu() {
    system("cls");
    printCentralizado("|================== BIBLIOTECA ==================|\n");
    printCentralizado("|  1. Adicionar Livro     2. Remover Livro       |\n");
    printCentralizado("|------------------------------------------------|\n");
    printCentralizado("|  3. Buscar Livro        4. Listar Disponiveis  |\n");
    printCentralizado("|------------------------------------------------|\n");
    printCentralizado("|  5. Listar Empréstimo   6. Registrar Devolução |\n");
    printCentralizado("|------------------------------------------------|\n");
    printCentralizado("|  7. Registrar Devolução 0. Sair                |\n");
    printCentralizado("|================================================|\n");

}

int main() {
    setlocale(LC_ALL, "Portuguese");
    carregarDados();
    TelaInicialLogin();

    int opcao;
    do {
        menu();
        printf("Opção: ");
        scanf("%d", &opcao);
        switch (opcao) {
            case 1: adicionarLivro(); break;
            case 2: removerLivro(); break;
            case 3: buscarLivro(); break;
            case 4: listarLivrosDisponiveis(); break;
            case 5: listarLivrosEmprestados(); break;
            case 6: registrarEmprestimo(); break;
            case 7: registrarDevolucao(); break;
            case 0: printf("Saindo...\n"); break;
            default: printf("Opção inválida!\n");
        }
        getchar();
        printf("\nPressione ENTER para continuar...");
        getchar();
    } while (opcao != 0);

    return 0;
}
